@page "/"
@using BookManagementSystem.Web.Models
@using BookManagementSystem.Web.Services
@inject BookService BookService
@inject IJSRuntime JSRuntime
@implements IDisposable

<PageTitle>Book Management System</PageTitle>

<div class="container">
    <div class="row mb-4">
        <div class="col">
            <h1>Book Management System</h1>
            <a href="/book/add" class="btn btn-primary">Add New Book</a>
            <button class="btn btn-secondary" @onclick="RefreshBooks">Refresh</button>
        </div>
    </div>

    @if (errorMessage != null)
    {
        <div class="alert alert-danger" role="alert">
            @errorMessage
            <button type="button" class="btn-close" @onclick="() => errorMessage = null"></button>
        </div>
    }

    @if (isLoading)
    {
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    }
    else if (books == null || !books.Any())
    {
        <div class="alert alert-info" role="alert">
            No books found. Click "Add New Book" to add some books.
        </div>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Title</th>
                        <th>Author</th>
                        <th>Genre</th>
                        <th>Published Year</th>
                        <th>Price</th>
                        <th>Discount</th>
                        <th>Final Price</th>
                        <th>Rating</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var book in books)
                    {
                        <tr>
                            <td>@book.Title</td>
                            <td>@book.Author</td>
                            <td>@book.Genre</td>
                            <td>@book.PublishedYear</td>
                            <td>@book.Price.ToString("C")</td>
                            <td>@book.DiscountPercentage%</td>
                            <td>@CalculateFinalPrice(book).ToString("C")</td>
                            <td>
                                <div class="rating">
                                    @for (int i = 1; i <= 5; i++)
                                    {
                                        var rating = i;
                                        <span class="star @(book.Rating >= rating ? "filled" : "")"
                                              @onclick="() => RateBook(book.Id, rating)">â˜…</span>
                                    }
                                </div>
                                <span> (@book.Rating.ToString("F1"))</span>
                            </td>
                            <td>
                                <a href="/book/edit/@book.Id" class="btn btn-sm btn-primary">Edit</a>
                                <button class="btn btn-sm btn-danger" @onclick="() => DeleteBookAsync(book.Id)">Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@code {
    private List<Book>? books;
    private string? errorMessage;
    private bool isLoading = true;
    private System.Threading.Timer? refreshTimer;

    protected override async Task OnInitializedAsync()
    {
        await LoadBooksAsync();
        
        // Set up a timer to refresh the books list every 30 seconds
        refreshTimer = new System.Threading.Timer(async _ =>
        {
            await InvokeAsync(async () =>
            {
                await LoadBooksAsync();
                StateHasChanged();
            });
        }, null, TimeSpan.FromSeconds(30), TimeSpan.FromSeconds(30));
    }

    public void Dispose()
    {
        refreshTimer?.Dispose();
    }

    private async Task RefreshBooks()
    {
        await LoadBooksAsync();
    }

    private async Task LoadBooksAsync()
    {
        try
        {
            isLoading = true;
            errorMessage = null;
            StateHasChanged();

            books = await BookService.GetAllBooksAsync();
            await JSRuntime.InvokeVoidAsync("console.log", "Books loaded:", books);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading books: {ex.Message}";
            await JSRuntime.InvokeVoidAsync("console.error", "Error loading books:", ex);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private decimal CalculateFinalPrice(Book book)
    {
        return book.Price * (1 - (book.DiscountPercentage / 100m));
    }

    private async Task RateBook(int bookId, decimal rating)
    {
        try
        {
            var book = books?.FirstOrDefault(b => b.Id == bookId);
            if (book != null)
            {
                book.Rating = rating;
                await BookService.UpdateBookAsync(bookId, book);
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error rating book: {ex.Message}";
            await JSRuntime.InvokeVoidAsync("console.error", "Error rating book:", ex);
        }
    }

    private async Task DeleteBookAsync(int bookId)
    {
        try
        {
            bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this book?");
            if (confirmed)
            {
                await BookService.DeleteBookAsync(bookId);
                await LoadBooksAsync();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting book: {ex.Message}";
            await JSRuntime.InvokeVoidAsync("console.error", "Error deleting book:", ex);
        }
    }
}
